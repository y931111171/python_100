{
  "uid" : "fa29eaaaaa62d09d",
  "name" : "test_rl_add",
  "fullName" : "test_case.test_rl_add#test_rl_add",
  "historyId" : "eb1cde014c774e9f3df3548544101827",
  "time" : {
    "start" : 1590410039322,
    "stop" : 1590410039337,
    "duration" : 15
  },
  "description" : "测试http://calapi.51jirili.com/feedBack/add接口",
  "descriptionHtml" : "<p>测试http://calapi.51jirili.com/feedBack/add接口</p>\n",
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "@allure.description(\"测试http://calapi.51jirili.com/feedBack/add接口\")\n    @allure.testcase(\"http://calapi.51jirili.com/feedBack/add\", \"测试用例地址\uD83D\uDC47\")\n    def test_rl_add():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n        # url = 'http://testcalapi.hellogeek.com/feedBack/add'\n        url = server_ip('realse') + yamldict['test_rl_add']['url']\n        r = RequestsHandler().post_Req(url=url, json=yamldict['test_rl_add']['json'],\n                                       headers=yamldict['test_rl_add']['headers'])\n        sting_response = r.content.decode()\n        # json_response = dict_style(sting_response)\n        # assert json_response['code'] == 0\n        # try:\n        #     assert json_response['code'] == 0\n        #     logger.info(\"code状态码返回正确：%s ----> PASS\", json_response['code'])\n        # except Exception:\n        #     logger.info(\"code状态码返回错误：%s ----> FAIL\", json_response['code'])\n        #\n        # assert json_response['msg'] == '执行成功'\n        # try:\n        #     assert json_response['msg'] == '执行成功'\n        #     logger.info(\"msg信息返回正确：%s ----> PASS\", json_response['msg'])\n        # except Exception:\n        #     logger.info(\"msg信息返回错误：%s ----> FAIL\", json_response['msg'])\n    \n>       json_response = dict_style(sting_response)\n\ntest_case\\test_rl_add.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Retrun_Response.py:12: in dict_style\n    json_response = json.loads(data)\nC:\\Program Files\\Python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001DF38C05A48>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试http://calapi.51jirili.com/feedBack/add接口",
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "@allure.description(\"测试http://calapi.51jirili.com/feedBack/add接口\")\n    @allure.testcase(\"http://calapi.51jirili.com/feedBack/add\", \"测试用例地址\uD83D\uDC47\")\n    def test_rl_add():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n        # url = 'http://testcalapi.hellogeek.com/feedBack/add'\n        url = server_ip('realse') + yamldict['test_rl_add']['url']\n        r = RequestsHandler().post_Req(url=url, json=yamldict['test_rl_add']['json'],\n                                       headers=yamldict['test_rl_add']['headers'])\n        sting_response = r.content.decode()\n        # json_response = dict_style(sting_response)\n        # assert json_response['code'] == 0\n        # try:\n        #     assert json_response['code'] == 0\n        #     logger.info(\"code状态码返回正确：%s ----> PASS\", json_response['code'])\n        # except Exception:\n        #     logger.info(\"code状态码返回错误：%s ----> FAIL\", json_response['code'])\n        #\n        # assert json_response['msg'] == '执行成功'\n        # try:\n        #     assert json_response['msg'] == '执行成功'\n        #     logger.info(\"msg信息返回正确：%s ----> PASS\", json_response['msg'])\n        # except Exception:\n        #     logger.info(\"msg信息返回错误：%s ----> FAIL\", json_response['msg'])\n    \n>       json_response = dict_style(sting_response)\n\ntest_case\\test_rl_add.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Retrun_Response.py:12: in dict_style\n    json_response = json.loads(data)\nC:\\Program Files\\Python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001DF38C05A48>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:355: JSONDecodeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fef4b5803b66a8aa",
      "name" : "log",
      "source" : "fef4b5803b66a8aa.txt",
      "type" : "text/plain",
      "size" : 73
    }, {
      "uid" : "eb5a734644c8d6db",
      "name" : "stderr",
      "source" : "eb5a734644c8d6db.txt",
      "type" : "text/plain",
      "size" : 120
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_rl_add"
  }, {
    "name" : "host",
    "value" : "dingrui"
  }, {
    "name" : "thread",
    "value" : "39348-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_rl_add"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "测试用例地址\uD83D\uDC47",
    "url" : "http://calapi.51jirili.com/feedBack/add",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "fa29eaaaaa62d09d.json",
  "parameterValues" : [ ]
}