{"name": "test_rl_add", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.description(\"ÊµãËØïhttp://calapi.51jirili.com/feedBack/addÊé•Âè£\")\n    @allure.testcase(\"http://calapi.51jirili.com/feedBack/add\", \"ÊµãËØïÁî®‰æãÂú∞ÂùÄüëá\")\n    def test_rl_add():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n        # url = 'http://testcalapi.hellogeek.com/feedBack/add'\n        url = server_ip('realse') + yamldict['test_rl_add']['url']\n        r = RequestsHandler().post_Req(url=url, json=yamldict['test_rl_add']['json'],\n                                       headers=yamldict['test_rl_add']['headers'])\n        sting_response = r.content.decode()\n        # json_response = dict_style(sting_response)\n        # assert json_response['code'] == 0\n        # try:\n        #     assert json_response['code'] == 0\n        #     logger.info(\"codeÁä∂ÊÄÅÁ†ÅËøîÂõûÊ≠£Á°ÆÔºö%s ----> PASS\", json_response['code'])\n        # except Exception:\n        #     logger.info(\"codeÁä∂ÊÄÅÁ†ÅËøîÂõûÈîôËØØÔºö%s ----> FAIL\", json_response['code'])\n        #\n        # assert json_response['msg'] == 'ÊâßË°åÊàêÂäü'\n        # try:\n        #     assert json_response['msg'] == 'ÊâßË°åÊàêÂäü'\n        #     logger.info(\"msg‰ø°ÊÅØËøîÂõûÊ≠£Á°ÆÔºö%s ----> PASS\", json_response['msg'])\n        # except Exception:\n        #     logger.info(\"msg‰ø°ÊÅØËøîÂõûÈîôËØØÔºö%s ----> FAIL\", json_response['msg'])\n    \n>       json_response = dict_style(sting_response)\n\ntest_case\\test_rl_add.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Retrun_Response.py:12: in dict_style\n    json_response = json.loads(data)\nC:\\Program Files\\Python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001DE0508B2C8>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python37\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "ÊµãËØïhttp://calapi.51jirili.com/feedBack/addÊé•Âè£", "attachments": [{"name": "log", "source": "5f247019-e2dc-40d1-a38e-5f735e71068f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a7c3b990-2c4e-4f9d-993a-c0287bc1d461-attachment.txt", "type": "text/plain"}], "start": 1590409926861, "stop": 1590409926876, "uuid": "4ed50885-53f5-4430-8a9e-0f36dd8ff8fe", "historyId": "eb1cde014c774e9f3df3548544101827", "testCaseId": "b56a8aaae2a993c3ae29f1559778ea1f", "fullName": "test_case.test_rl_add#test_rl_add", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_rl_add"}, {"name": "host", "value": "dingrui"}, {"name": "thread", "value": "43720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_rl_add"}], "links": [{"type": "test_case", "url": "http://calapi.51jirili.com/feedBack/add", "name": "ÊµãËØïÁî®‰æãÂú∞ÂùÄüëá"}]}